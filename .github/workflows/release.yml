name: Release

on:
  push:
    tags:
      - '*'

jobs:
  lint:
    name: Lint and format on ${{matrix.os}}, with ${{matrix.toolchain}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        toolchain: [stable]
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain ${{matrix.toolchain}}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{matrix.toolchain}}
          override: true
          components: rustfmt, clippy
      - name: Lint with ${{matrix.toolchain}}
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features
      - name: Format with ${{matrix.toolchain}}
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check -l

  check:
    name: Check on ${{matrix.os}}, with ${{matrix.toolchain}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        toolchain: [stable]
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain ${{matrix.toolchain}}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{matrix.toolchain}}
          override: true
      - name: Check with ${{matrix.toolchain}}
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-targets --all-features

  test:
    name: Test on ${{matrix.os}}, with ${{matrix.toolchain}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        toolchain: [stable]
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain ${{matrix.toolchain}}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{matrix.toolchain}}
          override: true
      - name: Test with ${{matrix.toolchain}}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

  linux-build:
    needs: [lint, check, test]
    name: Release build on Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get tag name
        uses: dawidd6/action-get-tag@v1
        id: tag
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Documentation build
        uses: actions-rs/cargo@v1
        env:
          RUSTDOCFLAGS: -Dwarnings
        with:
          command: doc
          args: --all-features --no-deps
      - name: Release build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features --release
      - name: Debug build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features
      - name: Strip + UPX release binary
        uses: svenstaro/upx-action@v2
        with:
          file: target/release/has
          strip: true
      - name: Build tarball
        shell: bash
        run: |
          export NAME=has-${{steps.tag.outputs.tag}}-linux
          mkdir $NAME
          cp target/release/has $NAME/has
          cp target/debug/has $NAME/has-debug
          cp -r target/doc $NAME/docs
          mkdir $NAME/examples
          cp tests/asm/fixtures/*.asm $NAME/examples/
          cp LICENSE $NAME/LICENSE
          cp README.md $NAME/README.md
          tar -c -f $NAME.tar.bz2 $NAME
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v2
        with:
          name: has-${{steps.tag.outputs.tag}}-linux.tar.bz2
          path: has-${{steps.tag.outputs.tag}}-linux.tar.bz2

  macos-build:
    needs: [lint, check, test]
    name: Release build on MacOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get tag name
        uses: dawidd6/action-get-tag@v1
        id: tag
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Documentation build
        uses: actions-rs/cargo@v1
        env:
          RUSTDOCFLAGS: -Dwarnings
        with:
          command: doc
          args: --all-features --no-deps
      - name: Release build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features --release
      - name: Debug build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features
      - name: Strip + UPX release binary
        uses: svenstaro/upx-action@v2
        with:
          file: target/release/has
          strip: true
      - name: Build tarball
        shell: bash
        run: |
          export NAME=has-${{steps.tag.outputs.tag}}-macos
          mkdir $NAME
          cp target/release/has $NAME/has
          cp target/debug/has $NAME/has-debug
          cp -r target/doc $NAME/docs
          mkdir $NAME/examples
          cp tests/asm/fixtures/*.asm $NAME/examples/
          cp LICENSE $NAME/LICENSE
          cp README.md $NAME/README.md
          tar -c -f $NAME.tar.bz2 $NAME
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v2
        with:
          name: has-${{steps.tag.outputs.tag}}-macos.tar.bz2
          path: has-${{steps.tag.outputs.tag}}-macos.tar.bz2

  windows-build:
    needs: [lint, check, test]
    name: Release build on Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get tag name
        uses: dawidd6/action-get-tag@v1
        id: tag
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Documentation build
        uses: actions-rs/cargo@v1
        env:
          RUSTDOCFLAGS: -Dwarnings
        with:
          command: doc
          args: --all-features --no-deps
      - name: Release build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features --release
      - name: Debug build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features
      - name: Strip + UPX release binary
        uses: svenstaro/upx-action@v2
        with:
          file: target\release\has.exe
          strip: false
      - name: Build tarball
        shell: bash
        run: |
          export NAME=has-${{steps.tag.outputs.tag}}-windows
          mkdir $NAME
          cp target/release/has.exe $NAME/has.exe
          cp target/debug/has.exe $NAME/has-debug.exe
          cp -r target/doc $NAME/docs
          cp tests/asm/fixtures/*.asm $NAME/examples/
          cp LICENSE $NAME/LICENSE
          cp README.md $NAME/README.md
          tar -c -f $NAME.zip $NAME
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v2
        with:
          name: has-${{steps.tag.outputs.tag}}-windows.zip
          path: has-${{steps.tag.outputs.tag}}-windows.zip

  create-release:
    needs: [linux-build, macos-build, windows-build]
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get tag name
        uses: dawidd6/action-get-tag@v1
        id: tag
      - name: Download Linux tarball
        uses: actions/download-artifact@v2
        with:
          name: has-${{steps.tag.outputs.tag}}-linux.tar.bz2
      - name: Download MacOS tarball
        uses: actions/download-artifact@v2
        with:
          name: has-${{steps.tag.outputs.tag}}-macos.tar.bz2
      - name: Download Windows tarball
        uses: actions/download-artifact@v2
        with:
          name: has-${{steps.tag.outputs.tag}}-windows.zip
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{steps.tag.outputs.tag}}
          release_name: has-${{steps.tag.outputs.tag}}
          body_path: changelogs/${{steps.tag.outputs.tag}}
      - name: Upload Linux tarball
        # id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: has-${{steps.tag.outputs.tag}}-linux.tar.bz2
          asset_name: has-${{steps.tag.outputs.tag}}-linux.tar.bz2
          asset_content_type: application/x-bzip2
      - name: Upload MacOS tarball
        # id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: has-${{steps.tag.outputs.tag}}-macos.tar.bz2
          asset_name: has-${{steps.tag.outputs.tag}}-macos.tar.bz2
          asset_content_type: application/x-bzip2
      - name: Upload Windows tarball
        # id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: has-${{steps.tag.outputs.tag}}-windows.zip
          asset_name: has-${{steps.tag.outputs.tag}}-windows.zip
          asset_content_type: application/zip
